#################################
#                               #
# grPPI v0.3 - FastFlow backend #
#                               #
#################################
19/10/2017 -- Fixed last type deduction problems and patterng nesting problems
 - Problems with tests '*_keep_multiple' and '*_discard_multiple' with 
   stream_filter pattern.
 - Run unit_tests, 96% tests passed, 5 tests failed out of 128:
 	18 - divideconquer_test_pred/*.static_multiple_five_threads_pred (Failed)
	125 - stream_reduce_test/*.static_window_offset (Failed)
	126 - stream_reduce_test/*.dyn_window_offset (Failed)
	127 - stream_reduce_test/*.static_offset_window (Failed)
	128 - stream_reduce_test/*.dyn_offset_window (Failed)
 - Resolved all problems related to pattern nesting, and input handling
 - Resolved all problems related to type deduction 

18/10/2017 -- Refactoring to version 0.3 completed
 - Problems when a nested Farm deals with a std::tuple object.
 - Pipe of Farm, where Farm is not inlined (i.e. declared as outer lambda func) 
   will not compile.
 - Type deduction problem with functions returning void
 - Working on unit_tests: added DaC tests adapted to FF interface.
 - All samples compile fine and run (except stream_reduce)
 - stream_iterator does not give correct result
 - Added cmake module for FastFlow checkout from Git
 - Created new mFastFlow repository containing only headers
 - Added cmake module for FastFlow checkout from SVN

17/10/2017 -- Refactoring to version 0.3 almost completed
 - All pattens have been updated to version 0.3
 - Improved FastFlow backend, introducing typed ff node and ordered farm
 - Stream_reduce pattern results are not correct: check	with David

10/10/2017 -- Started refactoring to version 0.3
 - data parallel pattern have been updated and fixed.
 - stream parallel patterns are almost done. Note that every pattern is now a 
 Pipeline of at least 2 stages, the first being an emitter and the second the 
 actual transforming pattern.
 - cmake module for FastFlow automatic cloning and installation not yet worging
 - samples updated



#################################
#                               #
# grPPI v0.2 - FastFlow backend #
#                               #
#################################

- nell'attesa di direttive su come gestire la libreria FastFlow, ho modificato 
il 'CMakeLists.txt' principale, aggiungendo le regole di inclusione e 
compilazione necessarie. Al momento, la cartella "ff" di FastFlow deve trovarsi 
al percorso "${PROJECT_SOURCE_DIR}/fastflow" (vedere 'CMakeLists.txt').
 
- al percorso "${PROJECT_SOURCE_DIR}/include/ff/" ci sono le interfacce per i 
pattern fin'ora esaminati, conformi alla struttura di grPPI v0.2.

- nel file 'parallel_execution_ff.h' ho rimosso tutta la parte relativa alla 
'mpmc_queue', usata con gli altri backend come canale di comunicazione. 

- il backend denominato *parallel_execution_ff* Ã¨ stato aggiunto nelle 
rispettive implementazioni polimorfiche attualmente testate. 

- tutti i data-parallel pattern sono testati e funzionanti.

- tra i pattern di stream parallelism (Farm e Pipeline, etc.), Farm funziona sia 
come *transforming* farm che come *identity* farm. Provato anche 
annidamento con pattern-as-a-worker:

        | --- Map --- |
        | --- Map --- |
  E --- |     ...     | --- C
        |             |
        | --- Map --- |

- StreamReduce pattern funzionante.

- StreamFilter pattern funzionante.

- Pipeline funzionante, con pattern nesting. 

- Problemi con Divide&Conquer: l'interfaccia grPPI per Divide&Conquer non 
prevede la dichiarazione esplicita di una condizione di split (per identificare 
il caso base): suppone che la funzione 'divide' controlli anche la condizione 
per il caso base. L'interfaccia di ff_DC richiede invece una 'condition_fn' per 
identificare il caso base.
 

- i pattern attualmente testati e funzionanti sono: 
    . Map, 
    . Reduce 
    . Map+Reduce,
    . Stencil,
    . Farm
    . StreamReduce
    . StreamFilter
    . Pipeline
Compilati con GNU g++ 6.3.0, eseguendo gli esempi contenuti in 
"${PROJECT_SOURCE_DIR}/samples/", con eventuali modifiche per riscontri di 
correttezza. 

- Eseguiti tutti i test inclusi in 'unit_test': 117 test eseguiti con successo 
su 122. 5 falliti, da verificare.


## TODO: 
- verificare unit_tests falliti
- sistemare Divide&Conquer
- StreamIterator?

