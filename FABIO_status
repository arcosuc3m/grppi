#################################
#                               #
# grPPI v0.2 - FastFlow backend #
#                               #
#################################

- nell'attesa di direttive su come gestire la libreria FastFlow, ho modificato 
il 'CMakeLists.txt' principale, aggiungendo le regole di inclusione e 
compilazione necessarie. Al momento, la cartella "ff" di FastFlow deve trovarsi 
al percorso "${PROJECT_SOURCE_DIR}/fastflow" (vedere 'CMakeLists.txt').
 
- al percorso "${PROJECT_SOURCE_DIR}/include/ff/" ci sono le interfacce per i 
pattern fin'ora esaminati, conformi alla struttura di grPPI v0.2.

- nel file 'parallel_execution_ff.h' ho rimosso tutta la parte relativa alla 
'mpmc_queue', usata con gli altri backend come canale di comunicazione. 

- il backend denominato *parallel_execution_ff* Ã¨ stato aggiunto nelle 
rispettive implementazioni polimorfiche attualmente testate. 

- tutti i data-parallel pattern sono testati e funzionanti.

- tra i pattern di stream parallelism (Farm e Pipeline, etc.), Farm funziona sia 
come *transforming* farm che come *identity* farm. Provato anche 
annidamento con pattern-as-a-worker:

        | --- Map --- |
        | --- Map --- |
  E --- |     ...     | --- C
        |             |
        | --- Map --- |

- StreamReduce pattern funzionante.

- StreamFilter pattern funzionante.

- Pipeline parzialmente funzionante. L'attuale versione funziona con gli esempi 
di pipeline contenuti in "samples/", ma nessuno di loro prevede la composizione 
di pattern (es. Pipe+Farm). Se si aggiunge una farm come stage della pipeline, 
ci sono errori di compilazione con qualsiasi backend. 

- Problemi con Divide&Conquer: l'interfaccia grPPI per Divide&Conquer non 
prevede la dichiarazione esplicita di una condizione di split (per identificare 
il caso base): suppone che la funzione 'divide' controlli anche la condizione 
per il caso base. L'interfaccia di ff_DC richiede invece una 'condition_fn' per 
identificare il caso base.
 

- i pattern attualmente testati e funzionanti sono: 
    . Map, 
    . Reduce 
    . Map+Reduce,
    . Stencil,
    . Farm
    . StreamReduce
    . StreamFilter
    . Pipeline (partial)
Compilati con GNU g++ 6.3.0, eseguendo gli esempi contenuti in 
"${PROJECT_SOURCE_DIR}/samples/", con eventuali modifiche per riscontri di 
correttezza. Non ho ancora eseguito l'intera test-suite contenuta in 
"${PROJECT_SOURCE_DIR}/unit_tests/"


## TODO: 
- sistemare Divide&Conquer
- pipeline per pattern composition
- StreamIterator?

